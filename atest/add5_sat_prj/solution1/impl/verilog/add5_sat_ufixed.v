// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="add5_sat_ufixed_add5_sat_ufixed,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.874000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=6,HLS_SYN_LUT=64,HLS_VERSION=2024_1}" *)

module add5_sat_ufixed (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a,
        b,
        c,
        d,
        e,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1:0] a;
input  [1:0] b;
input  [1:0] c;
input  [1:0] d;
input  [1:0] e;
output  [1:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] add_ln19_1_fu_90_p2;
reg   [3:0] add_ln19_1_reg_143;
wire    ap_CS_fsm_state2;
wire   [2:0] zext_ln19_1_fu_72_p1;
wire   [2:0] zext_ln19_fu_68_p1;
wire   [2:0] add_ln19_fu_76_p2;
wire   [3:0] zext_ln19_2_fu_82_p1;
wire   [3:0] zext_ln19_3_fu_86_p1;
wire   [3:0] zext_ln19_4_fu_96_p1;
wire   [3:0] add_ln19_2_fu_100_p2;
wire   [3:0] zext_ln19_5_fu_105_p1;
wire   [3:0] add_ln19_3_fu_109_p2;
wire   [1:0] tmp_fu_119_p4;
wire   [0:0] icmp_ln19_fu_129_p2;
wire   [1:0] sat_fu_115_p1;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln19_1_reg_143 <= add_ln19_1_fu_90_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln19_1_fu_90_p2 = (zext_ln19_2_fu_82_p1 + zext_ln19_3_fu_86_p1);

assign add_ln19_2_fu_100_p2 = (add_ln19_1_reg_143 + zext_ln19_4_fu_96_p1);

assign add_ln19_3_fu_109_p2 = (add_ln19_2_fu_100_p2 + zext_ln19_5_fu_105_p1);

assign add_ln19_fu_76_p2 = (zext_ln19_1_fu_72_p1 + zext_ln19_fu_68_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return = ((icmp_ln19_fu_129_p2[0:0] == 1'b1) ? 2'd3 : sat_fu_115_p1);

assign icmp_ln19_fu_129_p2 = ((tmp_fu_119_p4 != 2'd0) ? 1'b1 : 1'b0);

assign sat_fu_115_p1 = add_ln19_3_fu_109_p2[1:0];

assign tmp_fu_119_p4 = {{add_ln19_3_fu_109_p2[3:2]}};

assign zext_ln19_1_fu_72_p1 = b;

assign zext_ln19_2_fu_82_p1 = add_ln19_fu_76_p2;

assign zext_ln19_3_fu_86_p1 = c;

assign zext_ln19_4_fu_96_p1 = d;

assign zext_ln19_5_fu_105_p1 = e;

assign zext_ln19_fu_68_p1 = a;

endmodule //add5_sat_ufixed
