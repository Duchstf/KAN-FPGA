-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity add5_sat_ufixed is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a : IN STD_LOGIC_VECTOR (1 downto 0);
    b : IN STD_LOGIC_VECTOR (1 downto 0);
    c : IN STD_LOGIC_VECTOR (1 downto 0);
    d : IN STD_LOGIC_VECTOR (1 downto 0);
    e : IN STD_LOGIC_VECTOR (1 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of add5_sat_ufixed is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "add5_sat_ufixed_add5_sat_ufixed,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.874000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=6,HLS_SYN_LUT=64,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln19_1_fu_90_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln19_1_reg_143 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln19_1_fu_72_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln19_fu_68_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln19_fu_76_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln19_2_fu_82_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln19_3_fu_86_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln19_4_fu_96_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln19_2_fu_100_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln19_5_fu_105_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln19_3_fu_109_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_119_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln19_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sat_fu_115_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln19_1_reg_143 <= add_ln19_1_fu_90_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln19_1_fu_90_p2 <= std_logic_vector(unsigned(zext_ln19_2_fu_82_p1) + unsigned(zext_ln19_3_fu_86_p1));
    add_ln19_2_fu_100_p2 <= std_logic_vector(unsigned(add_ln19_1_reg_143) + unsigned(zext_ln19_4_fu_96_p1));
    add_ln19_3_fu_109_p2 <= std_logic_vector(unsigned(add_ln19_2_fu_100_p2) + unsigned(zext_ln19_5_fu_105_p1));
    add_ln19_fu_76_p2 <= std_logic_vector(unsigned(zext_ln19_1_fu_72_p1) + unsigned(zext_ln19_fu_68_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv2_3 when (icmp_ln19_fu_129_p2(0) = '1') else 
        sat_fu_115_p1;
    icmp_ln19_fu_129_p2 <= "0" when (tmp_fu_119_p4 = ap_const_lv2_0) else "1";
    sat_fu_115_p1 <= add_ln19_3_fu_109_p2(2 - 1 downto 0);
    tmp_fu_119_p4 <= add_ln19_3_fu_109_p2(3 downto 2);
    zext_ln19_1_fu_72_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b),3));
    zext_ln19_2_fu_82_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_fu_76_p2),4));
    zext_ln19_3_fu_86_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c),4));
    zext_ln19_4_fu_96_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d),4));
    zext_ln19_5_fu_105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(e),4));
    zext_ln19_fu_68_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a),3));
end behav;
