// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="activation_activation,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu13p-flga2577-2-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.674000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=18,HLS_SYN_LUT=125,HLS_VERSION=2023_2}" *)

module activation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r,
        output_r
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] input_r;
output  [15:0] output_r;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [7:0] lut_address0;
reg    lut_ce0;
wire   [11:0] lut_q0;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln90_fu_188_p1;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage0_01001;
wire   [9:0] tmp_2_fu_92_p4;
wire   [5:0] trunc_ln76_fu_114_p1;
wire   [9:0] tmp_1_fu_118_p3;
wire  signed [10:0] sext_ln76_fu_102_p1;
wire   [5:0] tmp_3_fu_138_p4;
wire   [10:0] add_ln76_fu_132_p2;
wire   [0:0] icmp_ln76_fu_126_p2;
wire  signed [6:0] sext_ln77_1_fu_148_p1;
wire   [6:0] tmp_5_fu_152_p4;
wire   [0:0] tmp_fu_106_p3;
wire   [6:0] select_ln76_fu_162_p3;
wire   [6:0] select_ln76_1_fu_170_p3;
wire  signed [7:0] sext_ln77_fu_178_p1;
wire   [7:0] index_fu_182_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

activation_lut_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 12 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lut_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_address0),
    .ce0(lut_ce0),
    .q0(lut_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut_ce0 = 1'b1;
    end else begin
        lut_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln76_fu_132_p2 = ($signed(sext_ln76_fu_102_p1) + $signed(11'd1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign icmp_ln76_fu_126_p2 = ((tmp_1_fu_118_p3 == 10'd0) ? 1'b1 : 1'b0);

assign index_fu_182_p2 = (sext_ln77_fu_178_p1 ^ 8'd128);

assign lut_address0 = zext_ln90_fu_188_p1;

assign output_r = $signed(lut_q0);

assign select_ln76_1_fu_170_p3 = ((tmp_fu_106_p3[0:0] == 1'b1) ? select_ln76_fu_162_p3 : sext_ln77_1_fu_148_p1);

assign select_ln76_fu_162_p3 = ((icmp_ln76_fu_126_p2[0:0] == 1'b1) ? sext_ln77_1_fu_148_p1 : tmp_5_fu_152_p4);

assign sext_ln76_fu_102_p1 = $signed(tmp_2_fu_92_p4);

assign sext_ln77_1_fu_148_p1 = $signed(tmp_3_fu_138_p4);

assign sext_ln77_fu_178_p1 = $signed(select_ln76_1_fu_170_p3);

assign tmp_1_fu_118_p3 = {{trunc_ln76_fu_114_p1}, {4'd0}};

assign tmp_2_fu_92_p4 = {{input_r[15:6]}};

assign tmp_3_fu_138_p4 = {{input_r[15:10]}};

assign tmp_5_fu_152_p4 = {{add_ln76_fu_132_p2[10:4]}};

assign tmp_fu_106_p3 = input_r[32'd15];

assign trunc_ln76_fu_114_p1 = input_r[5:0];

assign zext_ln90_fu_188_p1 = index_fu_182_p2;

endmodule //activation
