-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity KAN_lut_1_3_2_ROM_1P_LUTRAM_1R is 
    generic(
             DataWidth     : integer := 6; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 256
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of KAN_lut_1_3_2_ROM_1P_LUTRAM_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "100011", 1 => "100010", 2 => "100010", 3 => "100010", 
    4 => "100010", 5 => "100010", 6 => "100001", 7 => "100001", 
    8 => "100001", 9 => "100001", 10 => "100001", 11 => "100001", 
    12 => "100000", 13 => "100000", 14 => "100000", 15 => "100000", 
    16 => "100000", 17 => "100000", 18 => "100000", 19 => "100000", 
    20 => "100000", 21 => "100000", 22 => "100000", 23 => "100000", 
    24 => "100000", 25 => "100000", 26 => "100000", 27 => "100000", 
    28 => "100000", 29 => "100000", 30 => "100000", 31 => "100000", 
    32 => "100000", 33 => "100000", 34 => "100000", 35 => "100001", 
    36 => "100001", 37 => "100001", 38 => "100001", 39 => "100001", 
    40 => "100001", 41 => "100001", 42 => "100001", 43 => "100010", 
    44 => "100010", 45 => "100010", 46 => "100010", 47 => "100010", 
    48 => "100010", 49 => "100010", 50 => "100011", 51 => "100011", 
    52 => "100011", 53 => "100011", 54 => "100011", 55 => "100011", 
    56 => "100100", 57 => "100100", 58 => "100100", 59 => "100100", 
    60 => "100100", 61 => "100100", 62 => "100101", 63 => "100101", 
    64 => "100101", 65 => "100101", 66 => "100101", 67 => "100110", 
    68 => "100110", 69 => "100110", 70 => "100110", 71 => "100110", 
    72 => "100111", 73 => "100111", 74 => "100111", 75 => "100111", 
    76 => "101000", 77 => "101000", 78 => "101000", 79 => "101000", 
    80 => "101001", 81 => "101001", 82 => "101001", 83 => "101001", 
    84 => "101010", 85 => "101010", 86 => "101010", 87 => "101010", 
    88 => "101011", 89 => "101011", 90 => "101011", 91 => "101100", 
    92 => "101100", 93 => "101100", 94 => "101101", 95 => "101101", 
    96 => "101101", 97 => "101110", 98 => "101110", 99 => "101111", 
    100 => "101111", 101 => "101111", 102 => "110000", 103 => "110000", 
    104 => "110001", 105 => "110001", 106 => "110010", 107 => "110010", 
    108 => "110011", 109 => "110011", 110 => "110100", 111 => "110100", 
    112 => "110101", 113 => "110101", 114 => "110110", 115 => "110110", 
    116 => "110111", 117 => "110111", 118 => "111000", 119 => "111001", 
    120 => "111001", 121 => "111010", 122 => "111010", 123 => "111011", 
    124 => "111011", 125 => "111100", 126 => "111100", 127 => "111101", 
    128 => "111110", 129 => "111110", 130 => "111111", 131 => "111111", 
    132 => "000000", 133 => "000000", 134 => "000001", 135 => "000001", 
    136 => "000010", 137 => "000010", 138 => "000011", 139 => "000011", 
    140 => "000100", 141 => "000100", 142 => "000100", 143 => "000101", 
    144 => "000101", 145 => "000101", 146 => "000110", 147 => "000110", 
    148 => "000110", 149 => "000110", 150 => "000111", 151 => "000111", 
    152 => "000111", 153 => "000111", 154 => "000111", 155 => "001000", 
    156 => "001000", 157 => "001000", 158 => "001000", 159 => "001000", 
    160 => "001000", 161 => "001000", 162 => "001000", 163 => "001000", 
    164 => "001000", 165 => "001000", 166 => "001000", 167 => "001000", 
    168 => "001000", 169 => "000111", 170 => "000111", 171 => "000111", 
    172 => "000111", 173 => "000111", 174 => "000111", 175 => "000111", 
    176 => "000110", 177 => "000110", 178 => "000110", 179 => "000110", 
    180 => "000101", 181 => "000101", 182 => "000101", 183 => "000101", 
    184 => "000101", 185 => "000100", 186 => "000100", 187 => "000100", 
    188 => "000011", 189 => "000011", 190 => "000011", 191 => "000011", 
    192 => "000010", 193 => "000010", 194 => "000010", 195 => "000010", 
    196 => "000001", 197 => "000001", 198 => "000001", 199 => "000000", 
    200 => "000000", 201 => "000000", 202 => "000000", 203 => "111111", 
    204 => "111111", 205 => "111111", 206 => "111111", 207 => "111110", 
    208 => "111110", 209 => "111110", 210 => "111110", 211 => "111101", 
    212 => "111101", 213 => "111101", 214 => "111101", 215 => "111101", 
    216 => "111100", 217 => "111100", 218 => "111100", 219 => "111100", 
    220 => "111100", 221 => "111100", 222 => "111011", 223 => "111011", 
    224 => "111011", 225 => "111011", 226 => "111011", 227 => "111011", 
    228 => "111011", 229 => "111011", 230 => "111011", 231 => "111011", 
    232 => "111011", 233 => "111011", 234 => "111011", 235 => "111011", 
    236 => "111011", 237 => "111011", 238 => "111011", 239 => "111011", 
    240 => "111011", 241 => "111011", 242 => "111011", 243 => "111011", 
    244 => "111011", 245 => "111011", 246 => "111011", 247 => "111011", 
    248 => "111100", 249 => "111100", 250 => "111100", 251 => "111100", 
    252 => "111100", 253 => "111101", 254 => "111101", 255 => "111101");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "select_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "distributed";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

