-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity KAN_lut_1_3_1_ROM_1P_LUTRAM_1R is 
    generic(
             DataWidth     : integer := 7; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 256
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of KAN_lut_1_3_1_ROM_1P_LUTRAM_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1110010", 1 => "1110010", 2 => "1110010", 3 => "1110010", 
    4 => "1110011", 5 => "1110011", 6 => "1110011", 7 => "1110011", 
    8 => "1110011", 9 => "1110011", 10 => "1110011", 11 => "1110011", 
    12 => "1110011", 13 => "1110100", 14 => "1110100", 15 => "1110100", 
    16 => "1110100", 17 => "1110100", 18 => "1110101", 19 => "1110101", 
    20 => "1110101", 21 => "1110101", 22 => "1110110", 23 => "1110110", 
    24 => "1110110", 25 => "1110111", 26 => "1110111", 27 => "1110111", 
    28 => "1111000", 29 => "1111000", 30 => "1111000", 31 => "1111001", 
    32 => "1111001", 33 => "1111001", 34 => "1111010", 35 => "1111010", 
    36 => "1111010", 37 => "1111011", 38 => "1111011", 39 => "1111100", 
    40 => "1111100", 41 => "1111100", 42 => "1111101", 43 => "1111101", 
    44 => "1111110", 45 => "1111110", 46 => "1111110", 47 => "1111111", 
    48 => "1111111", 49 => "1111111", 50 => "0000000", 51 => "0000000", 
    52 => "0000001", 53 => "0000001", 54 => "0000001", 55 => "0000010", 
    56 => "0000010", 57 => "0000011", 58 => "0000011", 59 => "0000011", 
    60 => "0000100", 61 => "0000100", 62 => "0000100", 63 => "0000101", 
    64 => "0000101", 65 => "0000101", 66 => "0000110", 67 => "0000110", 
    68 => "0000111", 69 => "0000111", 70 => "0000111", 71 => "0001000", 
    72 => "0001000", 73 => "0001000", 74 => "0001000", 75 => "0001001", 
    76 => "0001001", 77 => "0001001", 78 => "0001010", 79 => "0001010", 
    80 => "0001010", 81 => "0001010", 82 => "0001011", 83 => "0001011", 
    84 => "0001011", 85 => "0001011", 86 => "0001100", 87 => "0001100", 
    88 => "0001100", 89 => "0001100", 90 => "0001100", 91 => "0001101", 
    92 => "0001101", 93 => "0001101", 94 => "0001101", 95 => "0001101", 
    96 => "0001101", 97 => "0001101", 98 => "0001110", 99 => "0001110", 
    100 => "0001110", 101 => "0001110", 102 => "0001110", 103 => "0001110", 
    104 => "0001110", 105 => "0001110", 106 => "0001110", 107 => "0001110", 
    108 => "0001110", 109 => "0001110", 110 => "0001110", 111 => "0001101", 
    112 => "0001101", 113 => "0001101", 114 => "0001101", 115 => "0001101", 
    116 => "0001101", 117 => "0001101", 118 => "0001100", 119 => "0001100", 
    120 => "0001100", 121 => "0001100", 122 => "0001100", 123 => "0001011", 
    124 => "0001011", 125 => "0001011", 126 => "0001010", 127 => "0001010", 
    128 => "0001010", 129 => "0001010", 130 => "0001001", 131 => "0001001", 
    132 => "0001000", 133 => "0001000", 134 => "0001000", 135 => "0000111", 
    136 => "0000111", 137 => "0000111", 138 => "0000110", 139 => "0000110", 
    140 => "0000101", 141 => "0000101", 142 => "0000100", 143 => "0000100", 
    144 => "0000011", 145 => "0000011", 146 => "0000011", 147 => "0000010", 
    148 => "0000010", 149 => "0000001", 150 => "0000001", 151 => "0000000", 
    152 => "1111111", 153 => "1111111", 154 => "1111110", 155 => "1111110", 
    156 => "1111101", 157 => "1111101", 158 => "1111100", 159 => "1111100", 
    160 => "1111011", 161 => "1111010", 162 => "1111010", 163 => "1111001", 
    164 => "1111001", 165 => "1111000", 166 => "1110111", 167 => "1110111", 
    168 => "1110110", 169 => "1110110", 170 => "1110101", 171 => "1110100", 
    172 => "1110100", 173 => "1110011", 174 => "1110010", 175 => "1110010", 
    176 => "1110001", 177 => "1110000", 178 => "1110000", 179 => "1101111", 
    180 => "1101110", 181 => "1101110", 182 => "1101101", 183 => "1101100", 
    184 => "1101011", 185 => "1101011", 186 => "1101010", 187 => "1101001", 
    188 => "1101001", 189 => "1101000", 190 => "1100111", 191 => "1100110", 
    192 => "1100110", 193 => "1100101", 194 => "1100100", 195 => "1100100", 
    196 => "1100011", 197 => "1100010", 198 => "1100010", 199 => "1100001", 
    200 => "1100000", 201 => "1100000", 202 => "1011111", 203 => "1011110", 
    204 => "1011110", 205 => "1011101", 206 => "1011101", 207 => "1011100", 
    208 => "1011011", 209 => "1011011", 210 => "1011010", 211 => "1011010", 
    212 => "1011001", 213 => "1011001", 214 => "1011001", 215 => "1011000", 
    216 => "1011000", 217 => "1010111", 218 => "1010111", 219 => "1010111", 
    220 => "1010111", 221 => "1010110", 222 => "1010110", 223 => "1010110", 
    224 => "1010110", 225 => "1010110", 226 => "1010101", 227 => "1010101", 
    228 => "1010101", 229 => "1010101", 230 => "1010101", 231 => "1010101", 
    232 => "1010101", 233 => "1010101", 234 => "1010101", 235 => "1010101", 
    236 => "1010101", 237 => "1010101", 238 => "1010101", 239 => "1010101", 
    240 => "1010110", 241 => "1010110", 242 => "1010110", 243 => "1010110", 
    244 => "1010110", 245 => "1010110", 246 => "1010111", 247 => "1010111", 
    248 => "1010111", 249 => "1010111", 250 => "1010111", 251 => "1011000", 
    252 => "1011000", 253 => "1011000", 254 => "1011000", 255 => "1011001");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "select_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "distributed";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

