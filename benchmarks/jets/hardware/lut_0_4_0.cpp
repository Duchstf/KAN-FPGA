#include "lut_0_4_0.h"
#include "value_to_index.h"

const lut_t lut_0_4_0[LUT_SIZE] = { 
   (lut_t)0.00000e+00, (lut_t)0.00000e+00, (lut_t)0.00000e+00, (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)3.75000e-01,  (lut_t)3.75000e-01,
(lut_t)0.00000e+00, (lut_t)-3.75000e-01, (lut_t)-6.25000e-01, (lut_t)-8.75000e-01,
(lut_t)-1.12500e+00, (lut_t)-1.37500e+00, (lut_t)-1.62500e+00, (lut_t)-2.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
 (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,  (lut_t)0.00000e+00,
};

lut_t lut_lookup_0_4_0(lut_input_t input) {
  #pragma HLS BIND_STORAGE variable=lut_0_4_0 type=RAM_1P impl=LUTRAM
  return lut_0_4_0[value_to_index(input)];
}