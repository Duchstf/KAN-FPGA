-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity activation_lut_V_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 12; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 256
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of activation_lut_V_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "000000000000", 1 => "000000000000", 2 => "000000000000", 3 => "000000000000", 
    4 => "000000000000", 5 => "000000000000", 6 => "000000000000", 7 => "000000000000", 
    8 => "000000000000", 9 => "000000000000", 10 => "000000000000", 11 => "000000000000", 
    12 => "111111111111", 13 => "111111111111", 14 => "111111111111", 15 => "111111111111", 
    16 => "111111111111", 17 => "111111111111", 18 => "111111111111", 19 => "111111111111", 
    20 => "111111111111", 21 => "111111111111", 22 => "111111111111", 23 => "111111111111", 
    24 => "111111111111", 25 => "111111111111", 26 => "111111111111", 27 => "111111111111", 
    28 => "111111111111", 29 => "111111111111", 30 => "111111111111", 31 => "111111111111", 
    32 => "111111111111", 33 => "111111111111", 34 => "111111111111", 35 => "111111111111", 
    36 => "111111111111", 37 => "111111111111", 38 => "111111111111", 39 => "000000000000", 
    40 => "000000000000", 41 => "000000000000", 42 => "000000000000", 43 => "000000000000", 
    44 => "000000000000", 45 => "000000000000", 46 => "000000000000", 47 => "000000000000", 
    48 => "000000000000", 49 => "000000000000", 50 => "000000000001", 51 => "000000000001", 
    52 => "000000000010", 53 => "000000000010", 54 => "000000000011", 55 => "000000000100", 
    56 => "000000000101", 57 => "000000000111", 58 => "000000001000", 59 => "000000001010", 
    60 => "000000001100", 61 => "000000001110", 62 => "000000010001", 63 => "000000010011", 
    64 => "000000010110", 65 => "000000011000", 66 => "000000011011", 67 => "000000011110", 
    68 => "000000100000", 69 => "000000100011", 70 => "000000100110", 71 => "000000101000", 
    72 => "000000101010", 73 => "000000101101", 74 => "000000101110", 75 => "000000110000", 
    76 => "000000110010", 77 => "000000110011", 78 => "000000110100", 79 => "000000110100", 
    80 => "000000110101", 81 => "000000110100", 82 => "000000110100", 83 => "000000110011", 
    84 => "000000110001", 85 => "000000101111", 86 => "000000101100", 87 => "000000101001", 
    88 => "000000100101", 89 => "000000100001", 90 => "000000011101", 91 => "000000011000", 
    92 => "000000010100", 93 => "000000001111", 94 => "000000001010", 95 => "000000000100", 
    96 => "111111111111", 97 => "111111111010", 98 => "111111110110", 99 => "111111110001", 
    100 => "111111101101", 101 => "111111101001", 102 => "111111100110", 103 => "111111100011", 
    104 => "111111100000", 105 => "111111011111", 106 => "111111011101", 107 => "111111011101", 
    108 => "111111011100", 109 => "111111011100", 110 => "111111011101", 111 => "111111011110", 
    112 => "111111100000", 113 => "111111100001", 114 => "111111100100", 115 => "111111100110", 
    116 => "111111101001", 117 => "111111101100", 118 => "111111101111", 119 => "111111110010", 
    120 => "111111110101", 121 => "111111111001", 122 => "111111111100", 123 => "000000000000", 
    124 => "000000000011", 125 => "000000000111", 126 => "000000001011", 127 => "000000001111", 
    128 => "000000010011", 129 => "000000010111", 130 => "000000011100", 131 => "000000100000", 
    132 => "000000100101", 133 => "000000101010", 134 => "000000101111", 135 => "000000110101", 
    136 => "000000111011", 137 => "000001000001", 138 => "000001001000", 139 => "000001001111", 
    140 => "000001010110", 141 => "000001011110", 142 => "000001100110", 143 => "000001101111", 
    144 => "000001111001", 145 => "000010000011", 146 => "000010001110", 147 => "000010011010", 
    148 => "000010100110", 149 => "000010110010", 150 => "000010111111", 151 => "000011001100", 
    152 => "000011011010", 153 => "000011101000", 154 => "000011110110", 155 => "000100000100", 
    156 => "000100010010", 157 => "000100100000", 158 => "000100101110", 159 => "000100111101", 
    160 => "000101001011", 161 => "000101011001", 162 => "000101100111", 163 => "000101110101", 
    164 => "000110000010", 165 => "000110010000", 166 => "000110011101", 167 => "000110101011", 
    168 => "000110111000", 169 => "000111000101", 170 => "000111010001", 171 => "000111011110", 
    172 => "000111101011", 173 => "000111110111", 174 => "001000000011", 175 => "001000001111", 
    176 => "001000011011", 177 => "001000100111", 178 => "001000110011", 179 => "001000111110", 
    180 => "001001001010", 181 => "001001010101", 182 => "001001100000", 183 => "001001101011", 
    184 => "001001110111", 185 => "001010000010", 186 => "001010001101", 187 => "001010011000", 
    188 => "001010100011", 189 => "001010101110", 190 => "001010111001", 191 => "001011000100", 
    192 => "001011001111", 193 => "001011011010", 194 => "001011100101", 195 => "001011101111", 
    196 => "001011111010", 197 => "001100000100", 198 => "001100001110", 199 => "001100011000", 
    200 => "001100100001", 201 => "001100101011", 202 => "001100110101", 203 => "001100111110", 
    204 => "001101001000", 205 => "001101010001", 206 => "001101011010", 207 => "001101100100", 
    208 => "001101101101", 209 => "001101110110", 210 => "001110000000", 211 => "001110001010", 
    212 => "001110010100", 213 => "001110011110", 214 => "001110101000", 215 => "001110110010", 
    216 => "001110111100", 217 => "001111000111", 218 => "001111010010", 219 => "001111011101", 
    220 => "001111101000", 221 => "001111110011", 222 => "001111111110", 223 => "010000001001", 
    224 => "010000010100", 225 => "010000011111", 226 => "010000101010", 227 => "010000110110", 
    228 => "010001000001", 229 => "010001001100", 230 => "010001010111", 231 => "010001100010", 
    232 => "010001101101", 233 => "010001111000", 234 => "010010000011", 235 => "010010001110", 
    236 => "010010011001", 237 => "010010100100", 238 => "010010101111", 239 => "010010111010", 
    240 => "010011000101", 241 => "010011010000", 242 => "010011011011", 243 => "010011100110", 
    244 => "010011110001", 245 => "010011111011", 246 => "010100000110", 247 => "010100010001", 
    248 => "010100011100", 249 => "010100100111", 250 => "010100110010", 251 => "010100111101", 
    252 => "010101000111", 253 => "010101010010", 254 => "010101011101", 255 => "010101101000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

