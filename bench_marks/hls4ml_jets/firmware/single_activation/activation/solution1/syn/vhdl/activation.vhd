-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity activation is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of activation is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "activation_activation,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu13p-flga2577-2-e,HLS_INPUT_CLOCK=2.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.425000,HLS_SYN_LAT=18,HLS_SYN_TPT=1,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=1243,HLS_SYN_LUT=1804,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_E000 : STD_LOGIC_VECTOR (15 downto 0) := "1110000000000000";
    constant ap_const_lv16_2000 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_const_lv15_2000 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv16_FFE8 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111101000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_A : STD_LOGIC_VECTOR (11 downto 0) := "000000001010";
    constant ap_const_lv12_FF6 : STD_LOGIC_VECTOR (11 downto 0) := "111111110110";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal lut_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut_V_ce0 : STD_LOGIC;
    signal lut_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal input_r_read_reg_814 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1650_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1650_reg_819 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1649_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1649_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1347_fu_201_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1347_reg_829 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_1_fu_229_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_1_reg_834 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_reg_839 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_846 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_5_fu_279_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_5_reg_851 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_s_reg_861 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_10_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_868_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_868_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_868_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_868_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_868_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1090_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1090_reg_874 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1090_reg_874_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1090_reg_874_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1090_reg_874_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1090_reg_874_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_2_fu_312_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_V_2_reg_879 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1092_fu_318_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1092_reg_884 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1092_reg_884_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1092_reg_884_pp0_iter9_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1099_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1099_reg_891 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1099_reg_891_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1099_fu_357_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1099_reg_898 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1099_reg_898_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1102_fu_361_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1102_reg_903 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1098_fu_365_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1098_reg_908 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1098_reg_908_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1098_reg_908_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1098_reg_908_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lsb_index_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_919 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln1102_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1102_reg_924 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_457_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln_reg_929 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1113_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1113_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1113_fu_470_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1113_reg_939 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1114_fu_475_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1114_reg_944 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_4_reg_949 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_6_reg_954 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1090_fu_583_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1090_reg_959 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1090_reg_959_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1090_reg_959_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1090_reg_959_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1090_reg_959_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1090_reg_959_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1090_reg_959_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln544_fu_594_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln544_reg_965 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_13_reg_970 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_13_reg_970_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_reg_975 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln554_fu_616_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln554_reg_980 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln554_reg_980_pp0_iter15_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln560_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln560_reg_985 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln560_reg_985_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln560_reg_985_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal F2_fu_628_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_reg_992 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_651_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_1000 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_1000_pp0_iter17_reg : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln570_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln570_reg_1005 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_673_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1010 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln571_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_1016 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln572_fu_686_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln572_reg_1022 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_reg_1028 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln570_fu_700_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln570_reg_1033 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln574_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln574_reg_1038 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_fu_740_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln571_reg_1043 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln570_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln570_reg_1048 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln541_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal select_ln83_fu_185_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1649_fu_191_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_4_fu_207_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln1273_fu_217_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_221_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln1270_fu_213_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln1003_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_2_fu_267_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_s_fu_255_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1002_fu_272_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln541_fu_286_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_fu_307_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_2_fu_321_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_11_fu_331_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1198_fu_339_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_343_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1102_fu_384_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1102_fu_389_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln1102_fu_393_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_4_fu_399_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1101_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_420_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1104_fu_433_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_5_fu_438_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1104_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1104_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1104_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1112_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1113_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1114_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln1113_fu_486_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1114_fu_495_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_501_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_3_fu_511_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1119_fu_545_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1098_fu_538_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1124_fu_550_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1117_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_556_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_12_fu_563_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_fu_575_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln766_fu_579_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln455_fu_620_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_14_fu_634_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln558_fu_641_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_645_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal add_ln570_fu_663_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln570_fu_668_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln570cast_fu_713_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln592_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln593_fu_717_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln560_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln571_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln592_fu_722_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln571_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln575_fu_762_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln575_fu_765_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln724_fu_774_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_777_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln575_fu_770_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln577_fu_785_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln574_fu_793_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln570_fu_800_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to17 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component activation_fpext_32ns_64_3_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component activation_lut_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    lut_V_U : component activation_lut_V_ROM_AUTO_1R
    generic map (
        DataWidth => 12,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut_V_address0,
        ce0 => lut_V_ce0,
        q0 => lut_V_q0);

    fpext_32ns_64_3_no_dsp_1_U1 : component activation_fpext_32ns_64_3_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln1090_reg_959,
        ce => ap_const_logic_1,
        dout => grp_fu_176_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                F2_reg_992 <= F2_fu_628_p2;
                exp_tmp_reg_975 <= ireg_fu_590_p1(62 downto 52);
                icmp_ln1090_reg_874 <= icmp_ln1090_fu_302_p2;
                icmp_ln1090_reg_874_pp0_iter10_reg <= icmp_ln1090_reg_874_pp0_iter9_reg;
                icmp_ln1090_reg_874_pp0_iter7_reg <= icmp_ln1090_reg_874;
                icmp_ln1090_reg_874_pp0_iter8_reg <= icmp_ln1090_reg_874_pp0_iter7_reg;
                icmp_ln1090_reg_874_pp0_iter9_reg <= icmp_ln1090_reg_874_pp0_iter8_reg;
                icmp_ln560_reg_985 <= icmp_ln560_fu_623_p2;
                icmp_ln560_reg_985_pp0_iter16_reg <= icmp_ln560_reg_985;
                icmp_ln560_reg_985_pp0_iter17_reg <= icmp_ln560_reg_985_pp0_iter16_reg;
                man_V_2_reg_1000_pp0_iter17_reg <= man_V_2_reg_1000;
                p_Result_10_reg_868 <= lut_V_q0(11 downto 11);
                p_Result_10_reg_868_pp0_iter10_reg <= p_Result_10_reg_868_pp0_iter9_reg;
                p_Result_10_reg_868_pp0_iter6_reg <= p_Result_10_reg_868;
                p_Result_10_reg_868_pp0_iter7_reg <= p_Result_10_reg_868_pp0_iter6_reg;
                p_Result_10_reg_868_pp0_iter8_reg <= p_Result_10_reg_868_pp0_iter7_reg;
                p_Result_10_reg_868_pp0_iter9_reg <= p_Result_10_reg_868_pp0_iter8_reg;
                p_Result_13_reg_970 <= ireg_fu_590_p1(63 downto 63);
                p_Result_13_reg_970_pp0_iter15_reg <= p_Result_13_reg_970;
                p_Val2_s_reg_861 <= lut_V_q0;
                r_V_1_reg_834 <= r_V_1_fu_229_p2;
                ret_V_5_reg_851 <= ret_V_5_fu_279_p3;
                ret_V_reg_839 <= r_V_1_fu_229_p2(19 downto 14);
                select_ln1090_reg_959 <= select_ln1090_fu_583_p3;
                select_ln1090_reg_959_pp0_iter12_reg <= select_ln1090_reg_959;
                select_ln1090_reg_959_pp0_iter13_reg <= select_ln1090_reg_959_pp0_iter12_reg;
                select_ln1090_reg_959_pp0_iter14_reg <= select_ln1090_reg_959_pp0_iter13_reg;
                select_ln1090_reg_959_pp0_iter15_reg <= select_ln1090_reg_959_pp0_iter14_reg;
                select_ln1090_reg_959_pp0_iter16_reg <= select_ln1090_reg_959_pp0_iter15_reg;
                select_ln1090_reg_959_pp0_iter17_reg <= select_ln1090_reg_959_pp0_iter16_reg;
                sext_ln1092_reg_884_pp0_iter8_reg <= sext_ln1092_reg_884;
                sext_ln1092_reg_884_pp0_iter9_reg <= sext_ln1092_reg_884_pp0_iter8_reg;
                sub_ln1099_reg_891_pp0_iter8_reg <= sub_ln1099_reg_891;
                tmp_V_2_reg_879 <= tmp_V_2_fu_312_p3;
                tmp_reg_846 <= r_V_1_fu_229_p2(13 downto 4);
                trunc_ln1098_reg_908_pp0_iter10_reg <= trunc_ln1098_reg_908_pp0_iter9_reg;
                trunc_ln1098_reg_908_pp0_iter8_reg <= trunc_ln1098_reg_908;
                trunc_ln1098_reg_908_pp0_iter9_reg <= trunc_ln1098_reg_908_pp0_iter8_reg;
                trunc_ln1099_reg_898_pp0_iter8_reg <= trunc_ln1099_reg_898;
                trunc_ln544_reg_965 <= trunc_ln544_fu_594_p1;
                trunc_ln554_reg_980 <= trunc_ln554_fu_616_p1;
                trunc_ln554_reg_980_pp0_iter15_reg <= trunc_ln554_reg_980;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1090_reg_874_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln1113_reg_939 <= add_ln1113_fu_470_p2;
                icmp_ln1113_reg_934 <= icmp_ln1113_fu_465_p2;
                    or_ln_reg_929(0) <= or_ln_fu_457_p3(0);
                sub_ln1114_reg_944 <= sub_ln1114_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln1347_reg_829 <= add_ln1347_fu_201_p2;
                icmp_ln1649_reg_824 <= icmp_ln1649_fu_195_p2;
                icmp_ln1650_reg_819 <= icmp_ln1650_fu_179_p2;
                input_r_read_reg_814 <= input_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln560_reg_985_pp0_iter16_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln570_reg_1048 <= and_ln570_fu_757_p2;
                icmp_ln574_reg_1038 <= icmp_ln574_fu_703_p2;
                select_ln571_reg_1043 <= select_ln571_fu_740_p3;
                sext_ln570_reg_1033 <= sext_ln570_fu_700_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1090_reg_874_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1102_reg_924 <= icmp_ln1102_fu_404_p2;
                lsb_index_reg_913 <= lsb_index_fu_369_p2;
                tmp_4_reg_919 <= lsb_index_fu_369_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln560_reg_985 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln570_reg_1005 <= icmp_ln570_fu_658_p2;
                icmp_ln571_reg_1016 <= icmp_ln571_fu_681_p2;
                man_V_2_reg_1000 <= man_V_2_fu_651_p3;
                sh_amt_reg_1010 <= sh_amt_fu_673_p3;
                tmp_9_reg_1028 <= sh_amt_fu_673_p3(11 downto 4);
                trunc_ln572_reg_1022 <= trunc_ln572_fu_686_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1090_reg_874_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                m_4_reg_949 <= m_3_fu_511_p2(63 downto 1);
                p_Result_6_reg_954 <= m_3_fu_511_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1090_reg_874 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sext_ln1092_reg_884 <= sext_ln1092_fu_318_p1;
                sub_ln1099_reg_891 <= sub_ln1099_fu_351_p2;
                trunc_ln1098_reg_908 <= trunc_ln1098_fu_365_p1;
                trunc_ln1099_reg_898 <= trunc_ln1099_fu_357_p1;
                trunc_ln1102_reg_903 <= trunc_ln1102_fu_361_p1;
            end if;
        end if;
    end process;
    or_ln_reg_929(1) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    F2_fu_628_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln455_fu_620_p1));
    LD_fu_575_p1 <= p_Result_12_fu_563_p5(32 - 1 downto 0);
    a_fu_415_p2 <= (icmp_ln1102_reg_924 and icmp_ln1101_fu_410_p2);
    add_ln1104_fu_433_p2 <= std_logic_vector(unsigned(trunc_ln1099_reg_898_pp0_iter8_reg) + unsigned(ap_const_lv16_FFE8));
    add_ln1113_fu_470_p2 <= std_logic_vector(unsigned(sub_ln1099_reg_891_pp0_iter8_reg) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln1124_fu_550_p2 <= std_logic_vector(unsigned(sub_ln1119_fu_545_p2) + unsigned(select_ln1098_fu_538_p3));
    add_ln1347_fu_201_p2 <= std_logic_vector(unsigned(trunc_ln1649_fu_191_p1) + unsigned(ap_const_lv15_2000));
    add_ln570_fu_663_p2 <= std_logic_vector(unsigned(F2_reg_992) + unsigned(ap_const_lv12_FF6));
    and_ln1104_fu_445_p2 <= (xor_ln1104_fu_427_p2 and p_Result_5_fu_438_p3);
    and_ln570_fu_757_p2 <= (xor_ln571_fu_751_p2 and icmp_ln570_reg_1005);
    and_ln571_fu_735_p2 <= (xor_ln560_fu_730_p2 and icmp_ln571_reg_1016);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to17_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to17 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to17)
    begin
        if (((ap_idle_pp0_0to17 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln575_fu_765_p2 <= std_logic_vector(shift_right(signed(man_V_2_reg_1000_pp0_iter17_reg),to_integer(unsigned('0' & zext_ln575_fu_762_p1(31-1 downto 0)))));
    bitcast_ln724_fu_774_p1 <= select_ln1090_reg_959_pp0_iter17_reg;
    bitcast_ln766_fu_579_p1 <= LD_fu_575_p1;
    icmp_ln1003_fu_262_p2 <= "1" when (tmp_reg_846 = ap_const_lv10_0) else "0";
    icmp_ln1090_fu_302_p2 <= "1" when (p_Val2_s_reg_861 = ap_const_lv12_0) else "0";
    icmp_ln1101_fu_410_p2 <= "1" when (signed(tmp_4_reg_919) > signed(ap_const_lv31_0)) else "0";
    icmp_ln1102_fu_404_p2 <= "0" when (p_Result_4_fu_399_p2 = ap_const_lv16_0) else "1";
    icmp_ln1113_fu_465_p2 <= "1" when (signed(lsb_index_reg_913) > signed(ap_const_lv32_0)) else "0";
    icmp_ln1649_fu_195_p2 <= "1" when (signed(select_ln83_fu_185_p3) > signed(ap_const_lv16_2000)) else "0";
    icmp_ln1650_fu_179_p2 <= "1" when (signed(input_r) < signed(ap_const_lv16_E000)) else "0";
    icmp_ln560_fu_623_p2 <= "1" when (trunc_ln544_reg_965 = ap_const_lv63_0) else "0";
    icmp_ln570_fu_658_p2 <= "1" when (signed(F2_reg_992) > signed(ap_const_lv12_A)) else "0";
    icmp_ln571_fu_681_p2 <= "1" when (F2_reg_992 = ap_const_lv12_A) else "0";
    icmp_ln574_fu_703_p2 <= "1" when (unsigned(sh_amt_reg_1010) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln592_fu_708_p2 <= "1" when (tmp_9_reg_1028 = ap_const_lv8_0) else "0";
    ireg_fu_590_p1 <= grp_fu_176_p1;
    
    l_fu_343_p3_proc : process(sext_ln1198_fu_339_p1)
    begin
        l_fu_343_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln1198_fu_339_p1(i) = '1' then
                l_fu_343_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_369_p2 <= std_logic_vector(unsigned(sub_ln1099_reg_891) + unsigned(ap_const_lv32_FFFFFFE8));
    lshr_ln1102_fu_393_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln1102_fu_389_p1(16-1 downto 0)))));
    lshr_ln1113_fu_486_p2 <= std_logic_vector(shift_right(unsigned(zext_ln1112_fu_480_p1),to_integer(unsigned('0' & zext_ln1113_fu_483_p1(31-1 downto 0)))));
    lut_V_address0 <= zext_ln541_fu_289_p1(8 - 1 downto 0);

    lut_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            lut_V_ce0 <= ap_const_logic_1;
        else 
            lut_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_2_fu_501_p3 <= 
        lshr_ln1113_fu_486_p2 when (icmp_ln1113_reg_934(0) = '1') else 
        shl_ln1114_fu_495_p2;
    m_3_fu_511_p2 <= std_logic_vector(unsigned(m_2_fu_501_p3) + unsigned(zext_ln1116_fu_508_p1));
    man_V_1_fu_645_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln558_fu_641_p1));
    man_V_2_fu_651_p3 <= 
        man_V_1_fu_645_p2 when (p_Result_13_reg_970_pp0_iter15_reg(0) = '1') else 
        zext_ln558_fu_641_p1;
    or_ln1104_fu_451_p2 <= (and_ln1104_fu_445_p2 or a_fu_415_p2);
    or_ln571_fu_747_p2 <= (icmp_ln571_reg_1016 or icmp_ln560_reg_985_pp0_iter16_reg);
    or_ln_fu_457_p3 <= (ap_const_lv1_0 & or_ln1104_fu_451_p2);
    output_r <= 
        ap_const_lv16_0 when (icmp_ln560_reg_985_pp0_iter17_reg(0) = '1') else 
        select_ln570_fu_800_p3;
    p_Result_11_fu_331_p3 <= (ap_const_lv1_1 & p_Result_2_fu_321_p4);
    p_Result_12_fu_563_p5 <= (zext_ln1117_fu_535_p1(63 downto 32) & tmp_2_fu_556_p3 & zext_ln1117_fu_535_p1(22 downto 0));
    p_Result_14_fu_634_p3 <= (ap_const_lv1_1 & trunc_ln554_reg_980_pp0_iter15_reg);
    
    p_Result_2_fu_321_p4_proc : process(sext_ln1092_fu_318_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable p_Result_2_fu_321_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := sext_ln1092_fu_318_p1;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for p_Result_2_fu_321_p4_i in 0 to 16-1 loop
                v0_cpy(p_Result_2_fu_321_p4_i) := sext_ln1092_fu_318_p1(16-1-p_Result_2_fu_321_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_2_fu_321_p4 <= resvalue(16-1 downto 0);
    end process;

    p_Result_4_fu_399_p2 <= (sext_ln1092_reg_884 and lshr_ln1102_fu_393_p2);
    p_Result_5_fu_438_p3 <= sext_ln1092_reg_884_pp0_iter8_reg(to_integer(unsigned(add_ln1104_fu_433_p2)) downto to_integer(unsigned(add_ln1104_fu_433_p2))) when (to_integer(unsigned(add_ln1104_fu_433_p2)) >= 0 and to_integer(unsigned(add_ln1104_fu_433_p2)) <=15) else "-";
    p_Result_s_fu_255_p3 <= r_V_1_reg_834(19 downto 19);
    r_V_1_fu_229_p2 <= std_logic_vector(unsigned(shl_ln_fu_221_p3) - unsigned(zext_ln1270_fu_213_p1));
    ret_V_2_fu_267_p2 <= std_logic_vector(unsigned(ret_V_reg_839) + unsigned(ap_const_lv6_1));
    ret_V_4_fu_207_p3 <= 
        ap_const_lv15_4000 when (icmp_ln1649_reg_824(0) = '1') else 
        add_ln1347_reg_829;
    ret_V_5_fu_279_p3 <= 
        select_ln1002_fu_272_p3 when (p_Result_s_fu_255_p3(0) = '1') else 
        ret_V_reg_839;
    select_ln1002_fu_272_p3 <= 
        ret_V_reg_839 when (icmp_ln1003_fu_262_p2(0) = '1') else 
        ret_V_2_fu_267_p2;
    select_ln1090_fu_583_p3 <= 
        ap_const_lv32_0 when (icmp_ln1090_reg_874_pp0_iter10_reg(0) = '1') else 
        bitcast_ln766_fu_579_p1;
    select_ln1098_fu_538_p3 <= 
        ap_const_lv8_7F when (p_Result_6_reg_954(0) = '1') else 
        ap_const_lv8_7E;
    select_ln570_fu_800_p3 <= 
        select_ln574_fu_793_p3 when (and_ln570_reg_1048(0) = '1') else 
        select_ln571_reg_1043;
    select_ln571_fu_740_p3 <= 
        trunc_ln572_reg_1022 when (and_ln571_fu_735_p2(0) = '1') else 
        select_ln592_fu_722_p3;
    select_ln574_fu_793_p3 <= 
        trunc_ln575_fu_770_p1 when (icmp_ln574_reg_1038(0) = '1') else 
        select_ln577_fu_785_p3;
    select_ln577_fu_785_p3 <= 
        ap_const_lv16_FFFF when (tmp_8_fu_777_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln592_fu_722_p3 <= 
        shl_ln593_fu_717_p2 when (icmp_ln592_fu_708_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln83_fu_185_p3 <= 
        ap_const_lv16_E000 when (icmp_ln1650_reg_819(0) = '1') else 
        input_r_read_reg_814;
        sext_ln1092_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_2_reg_879),16));

        sext_ln1198_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_11_fu_331_p3),32));

        sext_ln541_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_5_reg_851),8));

        sext_ln570_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1010),32));

    sext_ln570cast_fu_713_p1 <= sext_ln570_fu_700_p1(16 - 1 downto 0);
    sh_amt_fu_673_p3 <= 
        add_ln570_fu_663_p2 when (icmp_ln570_fu_658_p2(0) = '1') else 
        sub_ln570_fu_668_p2;
    shl_ln1114_fu_495_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1112_fu_480_p1),to_integer(unsigned('0' & zext_ln1114_fu_492_p1(31-1 downto 0)))));
    shl_ln593_fu_717_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln572_reg_1022),to_integer(unsigned('0' & sext_ln570cast_fu_713_p1(16-1 downto 0)))));
    shl_ln_fu_221_p3 <= (trunc_ln1273_fu_217_p1 & ap_const_lv8_0);
    sub_ln1099_fu_351_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(l_fu_343_p3));
    sub_ln1102_fu_384_p2 <= std_logic_vector(signed(ap_const_lv4_9) - signed(trunc_ln1102_reg_903));
    sub_ln1114_fu_475_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln1099_reg_891_pp0_iter8_reg));
    sub_ln1119_fu_545_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) - unsigned(trunc_ln1098_reg_908_pp0_iter10_reg));
    sub_ln570_fu_668_p2 <= std_logic_vector(unsigned(ap_const_lv12_A) - unsigned(F2_reg_992));
    tmp_2_fu_556_p3 <= (p_Result_10_reg_868_pp0_iter10_reg & add_ln1124_fu_550_p2);
    tmp_5_fu_420_p3 <= lsb_index_reg_913(31 downto 31);
    tmp_8_fu_777_p3 <= bitcast_ln724_fu_774_p1(31 downto 31);
    tmp_V_2_fu_312_p3 <= 
        tmp_V_fu_307_p2 when (p_Result_10_reg_868(0) = '1') else 
        p_Val2_s_reg_861;
    tmp_V_fu_307_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(p_Val2_s_reg_861));
    trunc_ln1098_fu_365_p1 <= l_fu_343_p3(8 - 1 downto 0);
    trunc_ln1099_fu_357_p1 <= sub_ln1099_fu_351_p2(16 - 1 downto 0);
    trunc_ln1102_fu_361_p1 <= sub_ln1099_fu_351_p2(4 - 1 downto 0);
    trunc_ln1273_fu_217_p1 <= ret_V_4_fu_207_p3(12 - 1 downto 0);
    trunc_ln1649_fu_191_p1 <= select_ln83_fu_185_p3(15 - 1 downto 0);
    trunc_ln544_fu_594_p1 <= ireg_fu_590_p1(63 - 1 downto 0);
    trunc_ln554_fu_616_p1 <= ireg_fu_590_p1(52 - 1 downto 0);
    trunc_ln572_fu_686_p1 <= man_V_2_fu_651_p3(16 - 1 downto 0);
    trunc_ln575_fu_770_p1 <= ashr_ln575_fu_765_p2(16 - 1 downto 0);
    xor_ln1104_fu_427_p2 <= (tmp_5_fu_420_p3 xor ap_const_lv1_1);
    xor_ln560_fu_730_p2 <= (icmp_ln560_reg_985_pp0_iter16_reg xor ap_const_lv1_1);
    xor_ln571_fu_751_p2 <= (or_ln571_fu_747_p2 xor ap_const_lv1_1);
    zext_ln1102_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1102_fu_384_p2),16));
    zext_ln1112_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1092_reg_884_pp0_iter9_reg),64));
    zext_ln1113_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1113_reg_939),64));
    zext_ln1114_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1114_reg_944),64));
    zext_ln1116_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_929),64));
    zext_ln1117_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_4_reg_949),64));
    zext_ln1270_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_4_fu_207_p3),20));
    zext_ln455_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_reg_975),12));
    zext_ln541_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln541_fu_286_p1),64));
    zext_ln558_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_14_fu_634_p3),54));
    zext_ln575_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln570_reg_1033),54));
end behav;
